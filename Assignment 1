from netmiko import (
    ConnectHandler,
    NetmikoTimeoutException,
    NetmikoAuthenticationException,
)
import sqlite3
import threading
import getpass
import time

def typeVerification(routerConfig,commands):
    #user input for connection type
    connectionType = input("Do you want a secure connection? Y/N")

    #taking password and secret parameters from the user
    routerConfig["password"] = getpass.getpass("Input password: ")
    routerConfig["secret"] = getpass.getpass("Input secret: ")
    
    #ssh connection
    if connectionType.upper()=='Y':
        #setting device_type parameter for ssh
        routerConfig["device_type"] = 'cisco_ios'

        #connects to router
        sshRouterConnect = ConnectHandler(**routerConfig)
        #enable mode
        sshRouterConnect.enable()

        #execute command and store into variable
        config = sshRouterConnect.send_command(commands[-1], use_textfsm=True)
        configBackup(config)

    #telnet connection
    elif connectionType.upper()=='N':
        #setting device_type parameter for telnet
        routerConfig["device_type"] = 'cisco_ios_telnet'

        #connects to router
        telnetRouterConnect = ConnectHandler(**routerConfig)
        #enable mode
        telnetRouterConnect.enable()

        #execute command and store into variable
        config = telnetRouterConnect.send_command(commands[-1], use_textfsm=True)
        configBackup(config)

    #erroneous inputs
    else:
        print('ERROR: Invalid input')
        typeVerification(routerConfig,commands)

def configBackup(config):
    full = input('Do you want the full configuration of the Router written to a text file? (Y/N)')

    if full.upper() ==  'Y':
        #write permissions to the text file
        backup = open('config.txt','w+')
        #writing the config backup to the text file
        backup.write(config)

        print('Backup of Router Configuration has been created successfully!')

    elif full.upper() == 'N':
        print('EXITING THE PROGRAM')
    
    else:
        print('ERROR: Invalid input')
        configBackup(config)

    dbBackup()

def dbBackup():
    user = input('Do you want a database of detailed configuration? (Y/N)')

    if user.upper() == 'Y':
        db(tables,routerConfig['host'])

    elif user.upper() == 'N':
        print('EXITING THE PROGRAM')

    else:
        print('ERROR: Invalid input')
        dbBackup()
    

def db(tables,host):
    con = sqlite3.connect('db.db')
    cursor = con.cursor()

    #creating the database
    cursor.execute(f'CREATE DATABASE {host} IF NOT EXIST;')
    cursor.extcute(f'USE {host}')

    #loop to create database tables
    for x in tables[0]:
        cursor.execute(f'CREATE TABLE {tables[0][x]} IF NOT EXIST;')
        tableName = tables[0][x].split('(',1)
        print(f'Database: Table {tableName} created successfully!')

    fillDatabase(tables[1])

def fillDatabase(commands):
    commands.remove('sh run')

    

def interfacesBrief(con,cursor):
    #User input
    interfaces = input('Do you want to view interfaces information? (Y/N)')

    #Conditions
    if interfaces.upper() == 'Y':
        #read from DB
        print(cursor.execute('SELECT * FROM InterfacesBrief;'))
        #delay to read
        time.sleep(10)
        #user input to continue
        proceed = input('Do you want to continue? (Y/N)')

        if proceed.upper() == 'Y':
            vlans(con,cursor)

        elif proceed.upper() == 'N':
            print('EXITING THE PROGRAM')

        else:
            print('ERROR: Invalid input - EXITING')


    elif interfaces.upper() == 'N':
        vlans(con,cursor)

    else:
        print('ERROR: Invalid input')
        interfaces(con,cursor)

def vlans(con,cursor):

    vlans = input('Do you want to view Vlan information? (Y/N)')

    if vlans.upper() == 'Y':
        print(cursor.execute('SELECT * FROM Vlans;'))
        #delay to read
        time.sleep(10)
        #user input to continue
        proceed = input('Do you want to continue? (Y/N)')
        
        if proceed.upper() == 'Y':
            mac(con,cursor)

        elif proceed.upper() == 'N':
            print('EXITING THE PROGRAM')

        else:
            print('ERROR: Invalid input - EXITING')

    elif Vlans.upper() == 'N':
        mac(con,cursor)

    else:
        print('ERROR: Invalid input')
        vlans(con,cursor)

def mac(con,cursor):
    macAddress = input('Do you want to view MAC Address information? (Y/N)')

    if macAddress.upper() == 'Y':
        print(cursor.execute('SELECT * FROM MACAddressTable;'))
        #delay to read
        time.sleep(10)
        #user input to continue
        proceed = input('Do you want to continue? (Y/N)')
        
        if proceed.upper() == 'Y':
            cdp(con,cursor)

        elif proceed.upper() == 'N':
            print('EXITING THE PROGRAM')

        else:
            print('ERROR: Invalid input - EXITING')

    elif macAddress.upper() == 'N':
        cdp(con,cursor)

    else:
        print('ERROR: Invalid input')
        mac(con,cursor)

def cdp(con,cursor):
    cdpNeighbors = input('Do you want to view CDP information? (Y/N)')

    if cdpNeighbors.upper() == 'Y':
        print(cursor.execute('SELECT * FROM CDPNeighbors;'))
        #delay to read
        time.sleep(10)
        #user input to continue
        proceed = input('Do you want to continue? (Y/N)')
        
        if proceed.upper() == 'Y':
            vtp(con,cursor)

        elif proceed.upper() == 'N':
            print('EXITING THE PROGRAM')

        else:
            print('ERROR: Invalid input - EXITING')

    elif cdpNeighbors.upper() == 'N':
        vtp(con,cursor)

    else:
        print('ERROR: Invalid input')
        cdp(con,cursor)

def vtp(con,cursor):
    vtpUser = input('Do you want to view VTP information? (Y/N)')

    if vtpUser.upper() == 'Y':
        print(cursor.execute('SELECT * FROM VTP;'))
        #delay to read
        time.sleep(10)
        #user input to continue
        proceed = input('Do you want to continue? (Y/N)')
        
        if proceed.upper() == 'Y':
            interfacesStatus(con,cursor)

        elif proceed.upper() == 'N':
            print('EXITING THE PROGRAM')

        else:
            print('ERROR: Invalid input - EXITING')

    elif vtpUser.upper() == 'N':
        interfacesStatus(con,cursor)

    else:
        print('ERROR: Invalid input')
        vtp(con,cursor)

def interfacesStatus(con,cursor):
    status = input('Do you want to view Interface Status information? (Y/N)')

    if status.upper() == 'Y':
        print(cursor.execute('SELECT * FROM InterfacesStatus;'))
        #delay to read
        time.sleep(10)
        #user input to continue
        proceed = input('Do you want to continue? (Y/N)')
        
        if proceed.upper() == 'Y':
            trunk(con,cursor)

        elif proceed.upper() == 'N':
            print('EXITING THE PROGRAM')

        else:
            print('ERROR: Invalid input - EXITING')

    elif status.upper() == 'N':
        trunk(con,cursor)

    else:
        print('ERROR: Invalid input')
        interfacesStatus(con,cursor)

def trunk(con,cursor):
    trunking = input('Do you want to view Trunking information? (Y/N)')

    if trunking.upper() == 'Y':
        print(cursor.execute('SELECT * FROM Trunk;'))
        #delay to read
        time.sleep(10)

        end = input('Press ENTER to exit the program')

    elif trunking.upper() == 'N':
        print('EXITING THE PROGRAM')

    else:
        print('ERROR: Invalid input')
        trunk(con,cursor)

if __name__ == "__main__":
    #router connection parameters
    routerConfig = {
        'device_type': '',
        'host': '192.168.1.1',
        'username': 'admin',
        'password': '',
        'secret': '',
    }

    #Database table parameters
    tables = ((
        """InterfacesBrief(
            Interface VARCHAR(255),
            IP VARCHAR(255),
            Status VARCHAR(255),
            Proto VARCHAR(255)
        )""",
        """Vlans(
            Number INTEGAR,
            Name VARCHAR(255),
            Status VARCHAR(255),
            Interfaces VARCHAR(255)
        )""",
        """MACAddressTable(
            Vlan INTEGAR
            MacAddress VARCHAR(255),
            Type VARCHAR(255),
            Ports VARCHAR(255)
        )""",
        """CDPNeighbors(
            DeviceID VARCHAR(255),
            LocalInterface VARCHAR(255),
            Holdtime INTEGAR,
            Capability VARCHAR(255),
            Platform VARCHAR(255),
            PortID VARCHAR(255),
        )""",
        """VTP(
            VersionCapable VARCHAR(255),
            VersionRunning VARCHAR(255),
            DomainName VARCHAR(255),
            PruningMode VARCHAR(255),
            TrapsGeneration VARCHAR(255),
            DeviceID VARCHAR(255),
            LastModified VARCHAR(255),
            OperatingMode VARCHAR(255),
            MaxVlans INTEGAR,
            ExistingVlans INTEGAR,
            ConfigurationRevisions INTEGAR,
            MD5Digest VARCHAR(255)
        )""",
        """InterfacesStatus(
            Port VARCHAR(255),
            Name VARCHAR(255),
            Status VARCHAR(255),
            Vlan INTEGAR,
            Duplex VARCHAR(255),
            Speed VARCHAR(255),
            Type VARCHAR(255)
        )""",
        """Trunk(
            Port VARCHAR(255),
            Mode VARCHAR(255),
            Encapsulation VARCHAR(255),
            Status VARCHAR(255),
            NativeVlan VARCHAR(255)
        )"""
    ),
    #Cisco command corresponding to the different tables
    (
        "sh ip int br",
        "sh vlans br",
        "sh mac address-table",
        "sh cdp neighbors",
        "sh vtp status",
        "sh int status",
        "sh int trunk",
        "sh run"
    ))

    config = typeVerification(routerConfig,tables[1])
