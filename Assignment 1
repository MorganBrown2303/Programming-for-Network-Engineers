from netmiko import (
    ConnectHandler,
    NetmikoTimeoutException,
    NetmikoAuthenticationException,
)
import sqlite3
import threading
import getpass

def typeVerification(routerConfig):
    #user input for connection type
    connectionType = input("Do you want a secure connection? Y/N")

    #taking password and secret parameters from the user
    Config["password"] = getpass.getpass("Input password: ")
    Config["secret"] = getpass.getpass("Input secret: ")
    
    #ssh connection
    if connectionType.upper()=='Y':
        #setting device_type parameter for ssh
        Config["device_type"] = 'cisco_ios'

        #connects to router
        sshRouterConnect = ConnectHandler(**sshRouterConfig)
        #enable mode
        sshRouterConnect.enable()

        #execute command and store into variable
        config = sshRouterConnect.send_command('sh run', use_textfsm=True)
        return config

    #telnet connection
    elif connectionType.upper()=='N':
        #setting device_type parameter for telnet
        Config["device_type"] = 'cisco_ios_telnet'

        #connects to router
        telnetRouterConnect = ConnectHandler(**telnetRouterConfig)
        #enable mode
        telnetRouterConnect.enable()

        #execute command and store into variable
        config = telnetRouterConnect.send_command('sh run', use_textfsm=True)
        return config

    #erroneous inputs
    else:
        print('Invalid input')
        typeVerification()

def configBackup(config):
    #write permissions to the text file
    backup = open('config.txt','w+')
    #writing the config backup to the text file
    backup.write(config)

    print('Backup of Router Configuration has been created successfully!')

def db(tables,host):
    con = sqlite3.connect('db.db')
    cursor = con.cursor()

    #creating the database
    cursor.execute(f'CREATE DATABASE {host} IF NOT EXIST;')

    #loop to create database tables
    for x in tables[0]:
        cursor.execute(f'CREATE TABLE {tables[0][x]} IF NOT EXIST;')
        tableName = tables[0][x].split('(',1)
        print(f'Database: Table {tableName} created successfully!')

def userInformation():

    interfaces = input('Do you want to view interfaces information? (Y/N)')

    if interfaces.upper() == 'Y':
        pass

    elif interfaces.upper() == 'N':
        pass

if __name__ == "__main__":
    #router connection parameters
    routerConfig = {
        'device_type': '',
        'host': '192.168.1.1',
        'username': 'admin',
        'password': '',
        'secret': '',
    }

    #Database table parameters
    tables = [[
        """InterfacesBrief(
            Interface VARCHAR(255),
            IP VARCHAR(255),
            Status VARCHAR(255),
            Proto VARCHAR(255)
        )""",
        """Vlans(
            Number INTEGAR,
            Name VARCHAR(255),
            Status VARCHAR(255),
            Interfaces VARCHAR(255)
        )""",
        """MACAddressTable(
            Vlan INTEGAR
            MacAddress VARCHAR(255),
            Type VARCHAR(255),
            Ports VARCHAR(255)
        )""",
        """CDPNeighbors(
            DeviceID VARCHAR(255),
            LocalInterface VARCHAR(255),
            Holdtime INTEGAR,
            Capability VARCHAR(255),
            Platform VARCHAR(255),
            PortID VARCHAR(255),
        )""",
        """VTP(
            VersionCapable VARCHAR(255),
            VersionRunning VARCHAR(255),
            DomainName VARCHAR(255),
            PruningMode VARCHAR(255),
            TrapsGeneration VARCHAR(255),
            DeviceID VARCHAR(255),
            LastModified VARCHAR(255),
            OperatingMode VARCHAR(255),
            MaxVlans INTEGAR,
            ExistingVlans INTEGAR,
            ConfigurationRevisions INTEGAR,
            MD5Digest VARCHAR(255)
        )""",
        """InterfacesStatus(
            Port VARCHAR(255),
            Name VARCHAR(255),
            Status VARCHAR(255),
            Vlan INTEGAR,
            Duplex VARCHAR(255),
            Speed VARCHAR(255),
            Type VARCHAR(255)
        )""",
        """Trunk(
            Port VARCHAR(255),
            Mode VARCHAR(255),
            Encapsulation VARCHAR(255),
            Status VARCHAR(255),
            NativeVlan VARCHAR(255)
        )"""
    ]
    #Cisco command corresponding to the different tables
    [
        "sh ip int br",
        "sh vlans br",
        "sh mac address-table",
        "sh cdp neighbors",
        "sh vtp status",
        "sh int status",
        "sh int trunk"
    ]]

    config = typeVerification(routerConfig)
    configBackup(config)
